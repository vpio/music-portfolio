{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","class","Navbar","variant","expand","Brand","Collapse","className","Text","Container","width","height","scrolling","frameborder","allow","src","Button","Nav","Item","Link","eventKey","style","color","icon","faSoundcloud","faInstagram","href","faFacebook","faTwitter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iTAkDeA,MA7Cf,WACE,OACE,yBAAKC,MAAM,OACT,kBAACC,EAAA,EAAD,CAAQC,QAAQ,QAAQC,OAAO,MAC7B,kBAACF,EAAA,EAAOG,MAAR,mBAGA,kBAACH,EAAA,EAAOI,SAAR,CAAiBC,UAAU,uBACzB,kBAACL,EAAA,EAAOM,KAAR,yDAKJ,yBAAKD,UAAU,QACb,kBAACE,EAAA,EAAD,KACE,4BAAQC,MAAM,OAAOC,OAAO,MAAMC,UAAU,KAAKC,YAAY,KAAKC,MAAM,WAAWC,IAAI,iNAEzF,kBAACN,EAAA,EAAD,KACE,sCACA,2BACE,kBAACO,EAAA,EAAD,CAAQb,QAAQ,QAAhB,sBAIJ,kBAACc,EAAA,EAAD,CAAKV,UAAU,0BACb,kBAACU,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,CAAUC,SAAS,SAASC,MAAO,CAACC,MAAO,SAC3C,kBAAC,IAAD,CAAiBC,KAAMC,QAGzB,kBAACP,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,CAAUC,SAAS,SAASC,MAAO,CAACC,MAAO,SAAS,kBAAC,IAAD,CAAiBC,KAAME,QAE7E,kBAACR,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,CAAUO,KAAK,SAASL,MAAO,CAACC,MAAO,SAAS,kBAAC,IAAD,CAAiBC,KAAMI,QAEzE,kBAACV,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,CAAUC,SAAS,SAASC,MAAO,CAACC,MAAO,SAAS,kBAAC,IAAD,CAAiBC,KAAMK,Y,MC9BnEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.92456484.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Container, Navbar, Nav } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faFacebook, faTwitter, faInstagram, faSoundcloud } from '@fortawesome/free-brands-svg-icons'\n\nfunction App() {\n  return (\n    <div class='app'>\n      <Navbar variant=\"funny\" expand=\"sm\">\n        <Navbar.Brand>\n          Pio Molina\n        </Navbar.Brand>\n        <Navbar.Collapse className=\"justify-content-end\">\n          <Navbar.Text>\n            Music Production | Mixing & Mastering | Violin\n          </Navbar.Text>\n        </Navbar.Collapse>\n      </Navbar>\n      <div className=\"main\">\n        <Container>\n          <iframe width=\"100%\" height=\"166\" scrolling=\"no\" frameborder=\"no\" allow=\"autoplay\" src=\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/711448027&color=%23ff5500&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true\"></iframe>\n        </Container>\n        <Container>\n          <h1>Latest</h1>\n          <p>\n            <Button variant=\"dark\">Full Discography</Button>\n          </p>\n\n        </Container>\n        <Nav className=\"justify-content-center\">\n          <Nav.Item>\n            <Nav.Link eventKey=\"link-3\" style={{color: 'grey'}}>\n            <FontAwesomeIcon icon={faSoundcloud} />\n            </Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey=\"link-2\" style={{color: 'grey'}}><FontAwesomeIcon icon={faInstagram} /></Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link href=\"link-0\" style={{color: 'grey'}}><FontAwesomeIcon icon={faFacebook} /></Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey=\"link-1\" style={{color: 'grey'}}><FontAwesomeIcon icon={faTwitter} /></Nav.Link>\n          </Nav.Item>\n        </Nav>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}